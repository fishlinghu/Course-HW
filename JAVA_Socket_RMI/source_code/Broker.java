import java.net.*;
import java.rmi.*;
import java.rmi.server.*;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;


public class Broker extends UnicastRemoteObject implements BrokerInterface
    {
    public class server_info
        {
        String name;
        String location;

        // For company only
        double tariff;
        Map<String, String> registered_meter_list = new HashMap<String, String> ();

        // For meter only
        double reading_value;
        String registered_company;
        String new_deal_company;

        // Constructor
        public server_info(String in_name, String in_location)
            {
            tariff = -1;
            reading_value = -1;
            name = in_name;
            location = in_location;
            }
        }

    /* variable below */
    int num_of_company, num_of_meter;
    Map<String, server_info> company_list = new HashMap<String, server_info> ();
    Map<String, server_info> meter_list = new HashMap<String, server_info> ();
    ArrayList company_name_list = new ArrayList();


    public Broker() throws RemoteException
        {
        // The default constructor generated by javac does not
        // declare that it throws RemoteException, and this is
        // required, as this exception is thrown by the
        // constructor for UnicastRemoteObject.
        super();
        num_of_company = 0;
        num_of_meter = 0;
        }

    public void addCompany(String company_name) throws RemoteException
        {
        String company_name_no_space = "";
        String temp_location = "rmi://localhost/";
        // Modify the url here
        company_name_no_space = company_name.replaceAll("\\s+","");
        temp_location = temp_location + company_name_no_space;
        server_info new_comp = new server_info(company_name, temp_location);
        company_list.put(company_name, new_comp);
        company_name_list.add(company_name);
        }

    public void addMeter(String meter_name) throws RemoteException
        {
        String meter_name_no_space = "";
        String temp_location = "rmi://localhost/";
        // Modify the url here
        meter_name_no_space = meter_name.replaceAll("\\s+","");
        temp_location = temp_location + meter_name_no_space;
        server_info new_meter = new server_info(meter_name, temp_location);
        meter_list.put(meter_name, new_meter);
        }

    public String getCompanyLocation(String company_name) throws RemoteException
        {
        String company_location;
        if(isThereSuchCompany(company_name))
            company_location = company_list.get(company_name).location;
        else
            company_location = "ERROR!";

        return company_location;
        }

    public String getMeterLocation(String meter_name) throws RemoteException
        {
        String meter_location;
        if(meter_list.containsKey(meter_name))
            meter_location = meter_list.get(meter_name).location;
        else
            meter_location = "ERROR!";

        return meter_location;
        }

    public ArrayList getCompanyNameList() throws RemoteException
        {
        return company_name_list;
        }

    public Map<String, String> getRegisteredMeterList(String company_name) throws RemoteException
        {
        return company_list.get(company_name).registered_meter_list;
        }

    public void listAllCompany() throws RemoteException
        {
        System.out.println("");
        for(Map.Entry<String,server_info> entry:company_list.entrySet())
            {
            System.out.printf("Company name: %s\n", entry.getKey());
            System.out.printf("Location: %s\n", entry.getValue().location);
            System.out.println("===================================================");
            }
        return;
        }

    public void listAllMeter() throws RemoteException
        {
        System.out.println("");
        for(Map.Entry<String,server_info> entry:meter_list.entrySet())
            {
            System.out.printf("Meter name: %s\n", entry.getKey());
            System.out.printf("Location: %s\n", entry.getValue().location);
            System.out.println("===================================================");
            }
        return;
        }

    public void getCompanyTariff() throws RemoteException
        {
        CompanyInterface company;
        for(Map.Entry<String,server_info> entry:company_list.entrySet())
            {
            try
                {
                company = (CompanyInterface) Naming.lookup(entry.getValue().location);
                entry.getValue().tariff = company.returnTariff();
                System.out.printf("\n%s's tariff: %f. \n", entry.getKey(), entry.getValue().tariff );
                }
            catch (Exception e)
                {
                e.printStackTrace();
                return;
                }
            }
        return;
        }

    public boolean isThereSuchCompany(String company_name) throws RemoteException
        {
        return company_list.containsKey(company_name);
        }

    public boolean isThereSuchMeter(String meter_name) throws RemoteException
        {
        return meter_list.containsKey(meter_name);
        }

    public String findDeal(String meter_name) throws RemoteException
        {
        String best_company_name = "";
        double best_deal = -8.76531;

        // Update all company's tariff
        getCompanyTariff();
        for(Map.Entry<String,server_info> entry:company_list.entrySet())
            {
            if(best_company_name == "")
                {
                // Initialization
                best_company_name = entry.getKey();
                best_deal = entry.getValue().tariff;
                }
            else if(entry.getValue().tariff < best_deal)
                {
                // Found a better deal
                best_company_name = entry.getKey();
                best_deal = entry.getValue().tariff;
                }
            }
        meter_list.get(meter_name).new_deal_company = best_company_name;
        return (best_company_name + "'s tariff: " + best_deal);
        }

    public String receiveRequestForDeal(String meter_name, String meter_host, String meter_location) throws RemoteException
        {
        System.out.printf("\nReceive the request for a new deal from %s, %s. ", meter_name, meter_host);
        double reading_value;
        MeterInterface meter;
        try
            {
            System.out.printf("Wait for %s's history of readings. \n", meter_name);
            meter = (MeterInterface) Naming.lookup(meter_location);
            reading_value = meter.sendReadingToBroker();
            meter_list.get(meter_name).reading_value = reading_value;
            System.out.printf("Receive the readings: %f. \n", reading_value);
            return findDeal(meter_name);
            }
        catch(Exception e)
            {
            e.printStackTrace();
            return "Error occurs when reaching for the meter.";
            }
        }

    public boolean registerMeterWithCompany(String meter_name, String meter_host, String meter_location) throws RemoteException
        {
        MeterInterface meter;
        String new_company_name = meter_list.get(meter_name).new_deal_company;
        System.out.printf("\n%s from %s accpets the new deal. \n", meter_name, meter_location);
        try
            {
            meter = (MeterInterface) Naming.lookup(meter_location);
            if(meter.registerCompany(new_company_name))
                {
                System.out.printf("Successfully register %s with the new company: %s. \n", meter_name, new_company_name);
                return true;
                }
            else
                {
                System.out.printf("Fail to register %s with %s. \n", meter_name, new_company_name);
                return false;
                }
            }
        catch(Exception e)
            {
            e.printStackTrace();
            return false;
            }
        }

    public void updateMeterRegistrationInfo(String meter_name, String meter_location, String registered_company) throws RemoteException
        {
        meter_list.get(meter_name).registered_company = registered_company;
        company_list.get(registered_company).registered_meter_list.put(meter_name, meter_location);
        return;
        }

    public void deleteRegisteredMeter(String meter_name, String company_name) throws RemoteException
        {
        meter_list.get(meter_name).registered_company = "";
        company_list.get(company_name).registered_meter_list.remove(meter_name);
        return;
        }

    public String getRegisteredCompany(String meter_name) throws RemoteException
        {
        return meter_list.get(meter_name).registered_company;
        }

    public String getRegisteredCompanyLocation(String meter_name) throws RemoteException
        {
        String company_name = meter_list.get(meter_name).registered_company;
        return company_list.get(company_name).location;
        }

    }
