import java.net.*;
import java.rmi.*;
import java.rmi.server.*;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Scanner;

public class Company extends UnicastRemoteObject implements CompanyInterface
    {
    public class server_info
        {
        String name;
        String location;
        double tariff;
        public server_info(String in_name, String in_location)
            {
            tariff = -1;
            name = in_name;
            location = in_location;
            }
        }
    // Variables below
    String company_name, company_location;
    double tariff;
    Map<String, server_info> meter_list = new HashMap<String, server_info> ();
    Scanner scanner = new Scanner(System.in);
    MeterInterface meter;
    BrokerInterface broker;

    public Company() throws RemoteException
        {
        // The default constructor generated by javac does not
        // declare that it throws RemoteException, and this is
        // required, as this exception is thrown by the
        // constructor for UnicastRemoteObject.
        super();
        try
            {
            broker = (BrokerInterface) Naming.lookup("rmi://localhost/broker");
            // Modify the url here
            }
        catch(Exception e)
            {
            e.printStackTrace();
            }
        tariff = -1;
        }

    public void setTariff() throws RemoteException
        {
        System.out.printf("\nPresent tariff: %f\n", tariff);
        System.out.printf("New tariff: ");
        tariff = scanner.nextDouble();
        System.out.println("Done!");
        return;
        }

    public void sendCommand() throws RemoteException
        {
        String your_words, meter_name;

        if(meter_list.size()==0)
            {
            System.out.printf("\nSorry you don't have any registered meter. \n");
            return;
            }
        listAllRegisteredMeter();
        System.out.printf("\nWhich meter do you want to send command to? \nEnter its name: ");
        while((meter_name = scanner.nextLine()).equals(""));
        if(meter_list.containsKey(meter_name))
            {
            System.out.printf("Enter your command: ");
            while((your_words = scanner.nextLine()).equals(""));
            try
                {
                meter = (MeterInterface) Naming.lookup(meter_list.get(meter_name).location);
                meter.receiveCommand(your_words);
                System.out.println("Command sent!");
                return;
                }
            catch(Exception e)
                {
                // e.printStackTrace();
                System.out.printf("Lost connection with %s. \n", meter_name);
                return;
                }
            }
        else
            {
            System.out.println("No such meter!");
            return;
            }
        }

    public void receiveAlert(String meter_name, String meter_location) throws RemoteException
        {
        System.out.printf("\nAlert from %s, %s. \n", meter_name, meter_location);
        return;
        }

    public void receiveReading(String meter_name, String meter_location, double reading_value) throws RemoteException
        {
        System.out.printf("\nReading from %s, %s is %f. \n", meter_name, meter_location, reading_value);
        return;
        }

    public boolean unregisterMeter(String meter_name, String meter_host) throws RemoteException
        {
        meter_list.remove(meter_name);
        broker.deleteRegisteredMeter(meter_name, company_name);
        System.out.printf("\n%s from %s has unregistered with you. \n", meter_name, meter_host);
        return true;
        }

    public boolean registerMeter(String meter_name, String meter_location) throws RemoteException
        {
        server_info new_meter = new server_info(meter_name, meter_location);
        meter_list.put(meter_name, new_meter);
        System.out.printf("\n%s from %s has registered with you. \n", meter_name, meter_location);
        return true;
        }

    public void listAllRegisteredMeter() throws RemoteException
        {
        System.out.println("");
        System.out.println("Following are registered meters: ");
        for(Map.Entry<String,server_info> entry:meter_list.entrySet())
            {
            System.out.printf("Meter name: %s\n", entry.getKey());
            System.out.printf("Location: %s\n", entry.getValue().location);
            System.out.println("===================================================");
            }
        return;
        }

    public double returnTariff() throws RemoteException
        {
        return tariff;
        }

    public String accessThing() throws RemoteException
        {
        String whoami = "unknown";
        //InetAddress whoami;
            try
                {
                whoami = InetAddress.getLocalHost().getHostName();
                return "Hello from " + whoami;
                }
            catch(Exception e)
                {
                e.printStackTrace();
                }
            return "Error!";
        }

    public void retrieveData() throws RemoteException
        {
        String message = "";
        Map<String, String> temp_meter_list = broker.getRegisteredMeterList(company_name);
        message = company_name + " is back online again!";
        for(Map.Entry<String,String> entry:temp_meter_list.entrySet())
            {
            server_info new_meter = new server_info(entry.getKey(), entry.getValue());
            meter_list.put(entry.getKey(), new_meter);
            try
                {
                meter = (MeterInterface) Naming.lookup(new_meter.location);
                meter.receiveCommand(message);
                }
            catch(Exception e)
                {
                System.out.printf("\nLost connection with %s. \n", entry.getKey());
                // e.printStackTrace();
                }
            }
        }
    public void meterBackOnline(String meter_name) throws RemoteException
        {
        System.out.printf("\n%s is back online again!\n", meter_name);
        }
    }
